{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8000'; // Replace with your backend API URL\n  }\n  // Add a method to send a request to the backend to become a host\n  becomeHost(userId) {\n    const url = `${this.apiUrl}/users/become-host/${userId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getToken());\n    return this.http.post(url, {}, {\n      headers\n    });\n  }\n  // Add a method to get the authentication token from local storage\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","AuthService","constructor","http","apiUrl","becomeHost","userId","url","headers","set","getToken","post","localStorage","getItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\babic\\OneDrive\\Desktop\\airbnb projekat\\airbnb-sit\\frontend\\src\\app\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:8000'; // Replace with your backend API URL\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Add a method to send a request to the backend to become a host\r\n  becomeHost(userId: string): Observable<any> {\r\n    const url = `${this.apiUrl}/users/become-host/${userId}`;\r\n    const headers = new HttpHeaders().set(\r\n      'Authorization',\r\n      'Bearer ' + this.getToken()\r\n    );\r\n\r\n    return this.http.post(url, {}, { headers });\r\n  }\r\n\r\n  // Add a method to get the authentication token from local storage\r\n  private getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;EAEH;EAEvC;EACAC,UAAUA,CAACC,MAAc;IACvB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,sBAAsBE,MAAM,EAAE;IACxD,MAAME,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CACnC,eAAe,EACf,SAAS,GAAG,IAAI,CAACC,QAAQ,EAAE,CAC5B;IAED,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACJ,GAAG,EAAE,EAAE,EAAE;MAAEC;IAAO,CAAE,CAAC;EAC7C;EAEA;EACQE,QAAQA,CAAA;IACd,OAAOE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC,QAAAC,CAAA,G;qBAnBUb,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlB,WAAW;IAAAmB,OAAA,EAAXnB,WAAW,CAAAoB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}