{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nexport let RegisterPageComponent = class RegisterPageComponent {\n  constructor(formBuilder, http, router, sanitizer) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.router = router;\n    this.sanitizer = sanitizer;\n    this.form = new FormGroup({});\n  }\n  sanitizeInput(input) {\n    if (typeof input === 'string') {\n      const blockedCharactersPattern = /[<>\"'`*/()\\[\\]?]/g;\n      input = input.replace(blockedCharactersPattern, '');\n    }\n    return input;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      first_name: '',\n      last_name: '',\n      password: ['', [Validators.pattern(/^(?=.*[A-Z])(?=.*[!@#$%^&*()_+])[a-zA-Z0-9!@#$%^&*()_+]{11,}$/)]],\n      phone: ['', [Validators.pattern(/^(?:[0-9] ?){6,12}[0-9]$/)]],\n      address: '',\n      email: ['', [Validators.pattern(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/)]],\n      user_type: 'User'\n    });\n  }\n  submit() {\n    if (this.form.invalid) {\n      if (this.form.controls['password'].invalid) {\n        alert('Password must be at least 11 characters, it needs to contain a capital letter and a special character.');\n      }\n      if (this.form.controls['phone'].invalid) {\n        alert('Please enter a valid phone number.');\n      }\n      if (this.form.controls['email'].invalid) {\n        alert('Please enter a valid email address.');\n      }\n      return;\n    }\n    const requestData = this.form.getRawValue();\n    console.log('Request Data:', requestData);\n    requestData.first_name = this.sanitizeInput(requestData.first_name);\n    requestData.last_name = this.sanitizeInput(requestData.last_name);\n    requestData.email = this.sanitizeInput(requestData.email);\n    requestData.password = this.sanitizeInput(requestData.password);\n    requestData.address = this.sanitizeInput(requestData.address);\n    requestData.phone = this.sanitizeInput(requestData.phone);\n    this.http.post('https://localhost/api/user/users/register', this.form.getRawValue()).subscribe(response => {\n      if (response && response['message'] === 'The chosen password is blacklisted') {\n        // Show a pop-up with the blacklisted password message\n        alert('The chosen password is blacklisted');\n      } else {\n        // Continue with your existing logic for other responses\n        this.router.navigate(['/login']);\n      }\n    }, error => {\n      // Handle other errors if needed\n      alert('An error occurred during registration');\n    });\n  }\n};\nRegisterPageComponent = __decorate([Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.css']\n})], RegisterPageComponent);","map":{"version":3,"names":["Component","FormGroup","Validators","RegisterPageComponent","constructor","formBuilder","http","router","sanitizer","form","sanitizeInput","input","blockedCharactersPattern","replace","ngOnInit","group","first_name","last_name","password","pattern","phone","address","email","user_type","submit","invalid","controls","alert","requestData","getRawValue","console","log","post","subscribe","response","navigate","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\babic\\OneDrive\\Desktop\\airbnb projekat\\airbnb-sit\\frontend\\src\\app\\register-page\\register-page.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-register-page',\r\n  templateUrl: './register-page.component.html',\r\n  styleUrls: ['./register-page.component.css'],\r\n})\r\nexport class RegisterPageComponent implements OnInit {\r\n  form: FormGroup = new FormGroup({});\r\n  sanitizedContent!: SafeHtml;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private http: HttpClient,\r\n    private router: Router,\r\n    private sanitizer: DomSanitizer\r\n  ) {}\r\n\r\n  sanitizeInput(input: any): any {\r\n    if (typeof input === 'string') {\r\n      const blockedCharactersPattern = /[<>\"'`*/()\\[\\]?]/g;\r\n      input = input.replace(blockedCharactersPattern, '');\r\n    }\r\n    return input;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      first_name: '',\r\n      last_name: '',\r\n      password: ['',[Validators.pattern(/^(?=.*[A-Z])(?=.*[!@#$%^&*()_+])[a-zA-Z0-9!@#$%^&*()_+]{11,}$/)]],\r\n      phone: ['',[Validators.pattern(/^(?:[0-9] ?){6,12}[0-9]$/)],],\r\n      address: '',\r\n      email: ['',[Validators.pattern(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/)],],\r\n      user_type: 'User',\r\n    });\r\n  }\r\n\r\n  submit(): void {\r\n    if (this.form.invalid) {\r\n      if (this.form.controls['password'].invalid) {\r\n        alert('Password must be at least 11 characters, it needs to contain a capital letter and a special character.');\r\n      }\r\n      if (this.form.controls['phone'].invalid) {\r\n        alert('Please enter a valid phone number.');\r\n      }\r\n      if (this.form.controls['email'].invalid) {\r\n        alert('Please enter a valid email address.');\r\n      }\r\n      return;\r\n    }\r\n    const requestData = this.form.getRawValue();\r\n    console.log('Request Data:', requestData);\r\n    requestData.first_name = this.sanitizeInput(requestData.first_name);\r\n    requestData.last_name = this.sanitizeInput(requestData.last_name);\r\n    requestData.email = this.sanitizeInput(requestData.email);\r\n    requestData.password = this.sanitizeInput(requestData.password);\r\n    requestData.address = this.sanitizeInput(requestData.address);\r\n    requestData.phone = this.sanitizeInput(requestData.phone);\r\n\r\n    this.http\r\n      .post('https://localhost/api/user/users/register', this.form.getRawValue())\r\n      .subscribe(\r\n        (response: any) => {\r\n          if (\r\n            response &&\r\n            response['message'] === 'The chosen password is blacklisted'\r\n          ) {\r\n            // Show a pop-up with the blacklisted password message\r\n            alert('The chosen password is blacklisted');\r\n          } else {\r\n            // Continue with your existing logic for other responses\r\n            this.router.navigate(['/login']);\r\n          }\r\n        },\r\n        (error) => {\r\n          // Handle other errors if needed\r\n          alert('An error occurred during registration');\r\n        }\r\n      );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}