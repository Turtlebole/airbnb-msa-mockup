import { InjectionToken } from "@angular/core";
/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */
export const RECAPTCHA_LANGUAGE = new InjectionToken("recaptcha-language");
/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */
export const RECAPTCHA_BASE_URL = new InjectionToken("recaptcha-base-url");
/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */
export const RECAPTCHA_NONCE = new InjectionToken("recaptcha-nonce-tag");
export const RECAPTCHA_SETTINGS = new InjectionToken("recaptcha-settings");
export const RECAPTCHA_V3_SITE_KEY = new InjectionToken("recaptcha-v3-site-key");
/**
 * See the documentation for `RecaptchaLoaderOptions`.
 */
export const RECAPTCHA_LOADER_OPTIONS = new InjectionToken("recaptcha-loader-options");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctcmVjYXB0Y2hhL3NyYy9saWIvdG9rZW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJL0MsMEZBQTBGO0FBQzFGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFTLG9CQUFvQixDQUFDLENBQUM7QUFDbkYsMEZBQTBGO0FBQzFGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFTLG9CQUFvQixDQUFDLENBQUM7QUFDbkYsMEZBQTBGO0FBQzFGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBUyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ2pGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBQzlGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUFTLHVCQUF1QixDQUFDLENBQUM7QUFzR3pGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxjQUFjLENBQXlCLDBCQUEwQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7IFJlY2FwdGNoYVNldHRpbmdzIH0gZnJvbSBcIi4vcmVjYXB0Y2hhLXNldHRpbmdzXCI7XG5cbi8qKiBAZGVwcmVjYXRlZCBVc2UgYExPQURFUl9PUFRJT05TYCBpbnN0ZWFkLiBTZWUgYFJlY2FwdGNoYUxvYWRlck9wdGlvbnMub25CZWZvcmVMb2FkYCAqL1xuZXhwb3J0IGNvbnN0IFJFQ0FQVENIQV9MQU5HVUFHRSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KFwicmVjYXB0Y2hhLWxhbmd1YWdlXCIpO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBgTE9BREVSX09QVElPTlNgIGluc3RlYWQuIFNlZSBgUmVjYXB0Y2hhTG9hZGVyT3B0aW9ucy5vbkJlZm9yZUxvYWRgICovXG5leHBvcnQgY29uc3QgUkVDQVBUQ0hBX0JBU0VfVVJMID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oXCJyZWNhcHRjaGEtYmFzZS11cmxcIik7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGBMT0FERVJfT1BUSU9OU2AgaW5zdGVhZC4gU2VlIGBSZWNhcHRjaGFMb2FkZXJPcHRpb25zLm9uQmVmb3JlTG9hZGAgKi9cbmV4cG9ydCBjb25zdCBSRUNBUFRDSEFfTk9OQ0UgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPihcInJlY2FwdGNoYS1ub25jZS10YWdcIik7XG5leHBvcnQgY29uc3QgUkVDQVBUQ0hBX1NFVFRJTkdTID0gbmV3IEluamVjdGlvblRva2VuPFJlY2FwdGNoYVNldHRpbmdzPihcInJlY2FwdGNoYS1zZXR0aW5nc1wiKTtcbmV4cG9ydCBjb25zdCBSRUNBUFRDSEFfVjNfU0lURV9LRVkgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPihcInJlY2FwdGNoYS12My1zaXRlLWtleVwiKTtcblxuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIG9wdGlvbnMgZm9yIGxvYWRpbmcgdGhlIHJlQ0FQVENIQSBzY3JpcHQgdGFnLlxuICovXG5leHBvcnQgdHlwZSBSZWNhcHRjaGFMb2FkZXJPcHRpb25zID0ge1xuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgdGhlIGA8c2NyaXB0PmAgdGFnIGlzIGFwcGVuZGVkIHRvIHRoZSBET00uXG4gICAqIFVzZSB0aGlzIGZ1bmN0aW9uIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHNldCBgbm9uY2VgLCBhcyB3ZWxsIGFzIG1vZGlmeSB0aGUgVVJMIG9mIHRoZSB0YWcuXG4gICAqXG4gICAqIFVzZSB0aGUgYHVybC5zZWFyY2hQYXJhbXNgIHRvIHNldCBhZGRpdGlvbmFsIHF1ZXJ5IHN0cmluZyBhdHRyaWJ1dGVzIChpbmNsdWRpbmcgcmVDQVBUQ0hBIGxhbmd1YWdlKSxcbiAgICogb3IgdXNlIGFuIGVudGlyZWx5IGRpZmZlcmVudCBiYXNlIFVSTCBhbHRvZ2V0aGVyLlxuICAgKlxuICAgKiBUaGUgVVJMIHRoYXQgeW91IHByb3ZpZGUgd2lsbCB0aGVuIHByb3Blcmx5IHNldCB0aGUgYFwicmVuZGVyXCJgIGFuZCBgXCJvbmxvYWRcImAgYXR0cmlidXRlcyB3aGljaCBhcmUgcmVxdWlyZWQgZm9yIHByb3BlciBgbmctcmVjYXB0Y2hhYCB3aXJlLXVwLlxuICAgKlxuICAgKiBAcGFyYW0gdXJsIHRoZSBjdXJyZW50IFVSTCB0aGF0IHdhcyBjb21wb3NlZC4gRWl0aGVyIG1vZGlmeSBpdCBpbi1wbGFjZSwgb3IgcmV0dXJuIGEgY29tcGxldGVseSBuZXcgVVJMLlxuICAgKiBAcmV0dXJucyB0aGUgZmluYWwgVVJMIHRoYXQgaXMgZ29pbmcgdG8gYmUgdXNlZCBhcyB0aGUgYHNyY2AgZm9yIHRoZSBgPHNjcmlwdD5gIHRhZywgYWxvbmcgd2l0aCAob3B0aW9uYWxseSkgYSBub25jZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogUHJvdmlkZSBub25jZTpcbiAgICogYGBgdHNcbiAgICoge1xuICAgKiAgICBwcm92aWRlOiBSRUNBUFRDSEFfTE9BREVSX09QVElPTlMsXG4gICAqICAgIHVzZVZhbHVlOiB7XG4gICAqICAgICAgb25CZWZvcmVMb2FkKHVybCkge1xuICAgKiAgICAgICAgcmV0dXJuIHtcbiAgICogICAgICAgICAgdXJsLFxuICAgKiAgICAgICAgICBub25jZTogXCJZT1VSX05PTkNFXCJcbiAgICogICAgICAgIH07XG4gICAqICAgICAgfVxuICAgKiAgICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIFNldCB0aGUgcmVDQVBUQ0hBIGxhbmd1YWdlOlxuICAgKiBgYGB0c1xuICAgKiB7XG4gICAqICAgIHByb3ZpZGU6IFJFQ0FQVENIQV9MT0FERVJfT1BUSU9OUyxcbiAgICogICAgdXNlVmFsdWU6IHtcbiAgICogICAgICBvbkJlZm9yZUxvYWQodXJsKSB7XG4gICAqICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChcImhsXCIsIFwiZW4tR0JcIilcbiAgICpcbiAgICogICAgICAgIHJldHVybiB7IHVybCB9O1xuICAgKiAgICAgIH1cbiAgICogICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBVc2UgYSBkaWZmZXJlbnQgYmFzZSBVUkwgZm9yIGxvYWRpbmcgcmVDQVBUQ0hBXG4gICAqIGBgYHRzXG4gICAqIHtcbiAgICogICAgcHJvdmlkZTogUkVDQVBUQ0hBX0xPQURFUl9PUFRJT05TLFxuICAgKiAgICB1c2VWYWx1ZToge1xuICAgKiAgICAgIG9uQmVmb3JlTG9hZChfdXJsKSB7XG4gICAqICAgICAgICBjb25zdCBjaGluYUNvbXBhdGlibGVVcmwgPSBuZXcgVVJMKFwiaHR0cHM6Ly93d3cucmVjYXB0Y2hhLm5ldC9yZWNhcHRjaGEvYXBpLmpzXCIpO1xuICAgKiAgICAgICAgLy8gb3B0aW9uYWxseSwgc2V0IHRoZSBsb2NhbGU6XG4gICAqICAgICAgICAvLyBjaGluYUNvbXBhdGlibGVVcmwuc2VhcmNoUGFyYW1zLnNldChcImhsXCIsIFwiemgtQ05cIik7XG4gICAqXG4gICAqICAgICAgICByZXR1cm4ge1xuICAgKiAgICAgICAgICB1cmw6IGNoaW5hQ29tcGF0aWJsZVVybFxuICAgKiAgICAgICAgfTtcbiAgICogICAgICB9XG4gICAqICAgIH1cbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIG9uQmVmb3JlTG9hZD8odXJsOiBVUkwpOiB7IHVybDogVVJMOyBub25jZT86IHN0cmluZyB9O1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIGNoYW5nZSB0aGUgYGdyZWNhcHRjaGFgIHRoYXQgdGhlIGBuZy1yZWNhcHRjaGFgIHdpbGwgYmUgcmVseWluZyBvbi5cbiAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIHdoZW4geW91IG5lZWQgdG8gdXNlIGBncmVjYXB0Y2hhLmVudGVycHJpc2VgIGluc3RlYWQgb2YgdGhlIGJhc2UgYGdyZWNhcHRjaGFgXG4gICAqXG4gICAqIEBwYXJhbSByZWNhcHRjaGEgdGhlIHZhbHVlIG9mIGB3aW5kb3cuZ3JlY2FwdGNoYWAgdXBvbiBzY3JpcHQgbG9hZC5cbiAgICogQHJldHVybnMgdGhlIHtSZUNhcHRjaGFWMi5SZUNhcHRjaGF9IGluc3RhbmNlIHRoYXQgdGhlIGBuZy1yZWNhcHRjaGFgIGxpYiB3aWxsIHVzZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogVXNpbmcgdGhlIEVudGVycHJpc2UgdmVyc2lvbiBvZiBgZ3JlY2FwdGNoYWA6XG4gICAqXG4gICAqIGBgYHRzXG4gICAqIHtcbiAgICogICAgcHJvdmlkZTogUkVDQVBUQ0hBX0xPQURFUl9PUFRJT05TLFxuICAgKiAgICB1c2VWYWx1ZToge1xuICAgKiAgICAgIG9uQmVmb3JlTG9hZCgpIHtcbiAgICogICAgICAgIGNvbnN0IHJlY2FwdGNoYUVudGVycHJpc2VVcmwgPSBuZXcgVVJMKFwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvZW50ZXJwcmlzZS5qc1wiKTtcbiAgICogICAgICAgIC8vIG9wdGlvbmFsbHksIGlmIHlvdSdyZSB1c2luZyB0aGUgcmVDQVBUQ0hBIHNlc3Npb24tdG9rZW5zLCBzZXQgdGhlIGAmd2FmPXNlc3Npb25gIHBhcmFtLFxuICAgKiAgICAgICAgLy8gc2VlIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9yZWNhcHRjaGEtZW50ZXJwcmlzZS9kb2NzL2ltcGxlbWVudC13YWYtY2Ejc2Vzc2lvbi10b2tlblxuICAgKiAgICAgICAgLy8gcmVjYXB0Y2hhRW50ZXJwcmlzZVVybC5zZWFyY2hQYXJhbXMuc2V0KFwid2FmXCIsIFwic2Vzc2lvblwiKTtcbiAgICpcbiAgICogICAgICAgIHJldHVybiB7XG4gICAqICAgICAgICAgIHVybDogcmVjYXB0Y2hhRW50ZXJwcmlzZVVybCxcbiAgICogICAgICAgIH1cbiAgICogICAgICB9LFxuICAgKiAgICAgIG9uTG9hZGVkKHJlY2FwdGNoYSkge1xuICAgKiAgICAgICAgcmV0dXJuIHJlY2FwdGNoYS5lbnRlcnByaXNlO1xuICAgKiAgICAgIH1cbiAgICogICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgb25Mb2FkZWQ/KHJlY2FwdGNoYTogUmVDYXB0Y2hhVjIuUmVDYXB0Y2hhKTogUmVDYXB0Y2hhVjIuUmVDYXB0Y2hhO1xufTtcblxuLyoqXG4gKiBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIGBSZWNhcHRjaGFMb2FkZXJPcHRpb25zYC5cbiAqL1xuZXhwb3J0IGNvbnN0IFJFQ0FQVENIQV9MT0FERVJfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxSZWNhcHRjaGFMb2FkZXJPcHRpb25zPihcInJlY2FwdGNoYS1sb2FkZXItb3B0aW9uc1wiKTtcbiJdfQ==