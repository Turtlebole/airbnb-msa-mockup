version: '3'

services:
  api_gateway:
    container_name: api_gateway
    hostname: api_gateway
    build:
      context: ./backend/api_gateway
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "443:443"
      - "8000:8000"
    networks:
      - network
    depends_on:
      - user-service
      - accommodation-service
      - profile-service 
      

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: dockerfile
    restart: always
    container_name: "user-service"
    hostname: "user-service"
    ports:
      - 8080:8080
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:pass@user_data_base:27017
    depends_on:
      user_data_base:
        condition: service_healthy
    networks:
      - network

  accommodation-service:
    build:
      context: ./backend/accommodation-service
      dockerfile: dockerfile
    restart: always
    container_name: "accommodation-service"
    hostname: "accommodation-service"
    ports:
      - 8001:8001
    environment:
      - PORT=8001
      - MONGO_DB_URI=mongodb://root:pass@accommodation_data_base:27017
    depends_on:
      accommodation_data_base:
        condition: service_healthy
    networks:
      - network

  profile-service:
    build:
      context: ./backend/profile-service
    restart: always
    container_name: "profile-service"
    hostname: "profile-service"
    ports:
      - 8088:8088
    environment:
      - PORT=8088
      - MONGO_DB_URI=mongodb://root:pass@profile_data_base:27017
    networks:
      - network

  reservation-service:
    build:
      context: ./backend/reservation-service
      dockerfile: Dockerfile
    restart: always
    container_name: "reservation-service"
    hostname: "reservation-service"
    #Mapping ports
    ports:
      # <port_on_local>:<port_in_machine>
      - 8002:8002
    #Will be accessible through os.Getenv("PORT")
    environment:
      - PORT=8002
      # NoSQL: environment variable holding connection URI for Cassandra database
      - CASS_DB=cassandra:9042
    # NoSQL: Extremely important! Cassandra takes a lot of time to start!
    # If we don't wait for it to fully initialize we will get exceptions and will not be able to connect!
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - network

  cassandra:
    image: cassandra
    restart: always
    ports:
      - "9042:9042"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: [ "CMD-SHELL", "cqlsh -e 'describe cluster'" ]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data
    networks:
      - network

  accommodation_data_base:
    hostname: "accommodation_data_base"
    container_name: "accommodation_data_base"
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: accommodationDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - accommodation_data_base:/data/db
    networks:
      - network

  user_data_base:
    hostname: "user_data_base"
    container_name: "user_data_base"
    image: mongo
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: userDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - user_data_base:/data/db
    networks:
      - network

  profile_data_base:
    hostname: "profile_data_base"
    container_name: "profile_data_base"
    image: mongo
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: profileDB
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - profile_data_base:/data/db
    networks:
      - network

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      # hostname of mongo databse
      - ME_CONFIG_MONGODB_SERVER=accommodation_data_base, user_data_base, profile_data_base
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - accommodation_data_base
      - user_data_base
      - profile_data_base
    ports:
      - "8083:8083"
    volumes:
      - mong_express_data:/data/db
    networks:
      - network

volumes:
  accommodation_data_base:
  user_data_base:
  profile_data_base:
  mong_express_data:
  cass_store:

networks:
  network:
    driver: bridge
